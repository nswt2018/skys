#set($controllerpackname=${models.controllerPackName})
#set($modelpackname=${models.modelPackName})
#set($servicepackname=${models.servicePackName})
#set($model=${models.model})
#set($moducode=${models.moduCode})
#set($tid=${models.tid})
#set($syscode=${models.sysCode})
package ${controllerpackname};


import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.sky.core.base.controller.BaseController;
import ${modelpackname}.${model};
import ${servicepackname}.I${model}Service;
import com.sky.core.exception.BusinessException;
import com.sky.core.message.Message;
import com.sky.core.page.Page;

import reactor.core.publisher.Mono;

@RestController
public class ${model}Controller extends BaseController{
	@Resource(name = "${model}Service")
	private I${model}Service ${model}Service;
	@RequestMapping(value = "/${syscode}/${tid}L.do", method = RequestMethod.POST)
	@ResponseBody
	public Mono<Page<${model}>> get${model}PageList(@RequestBody Page<${model}> page, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		page.setRequest(request);
		${model}Service.findForPageList("com.sky.app.mapper.${model}Mapper.findForPageList", page);
		page.setRequest(null);
		return Mono.justOrEmpty(page);
	}

	@PutMapping(value = "/${syscode}/${tid}I.do")
	@ResponseBody
	public Mono<Message> insert${model}(@RequestBody ${model} ${model}, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			if (${model}!= null) {
				int insertrows = ${model}Service.save(${model});
				if (insertrows > 0) {
					return Mono.justOrEmpty(new Message("000001"));
				} else {
					return Mono.justOrEmpty(new Message("000004"));
				}
			} else {
				return Mono.justOrEmpty(new Message("000004"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("-000000", e.getMessage());
		}
	}
	@PutMapping(value = "/${syscode}/${tid}U.do")
	@ResponseBody
	public Mono<Message> update${model}(@RequestBody ${model} ${model}, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			if (${model} != null) {
				int updaterows = ${model}Service.update(${model});
				if (updaterows > 0) {
					return Mono.justOrEmpty(new Message("000003"));
				} else {
					return Mono.justOrEmpty(new Message("000006"));
				}
			} else {
				return Mono.justOrEmpty(new Message("000006"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("-000000", e.getMessage());
		}
	}
	@DeleteMapping("/${syscode}/${tid}D.do")
	@ResponseBody
	public Mono<Message> delete${model}(@RequestParam String[] delKeys, HttpServletRequest request,
			HttpServletResponse response) {
		try {
			if (delKeys == null || delKeys.length == 0)
				throw new BusinessException("000005");
			for (String delKey : delKeys) {
				${model}Service.delete(delKey);
			}
			return Mono.justOrEmpty(new Message("000002"));
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("-000000", e.getMessage());
		}
	}

}
