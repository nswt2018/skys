#set($controllerpackname=${models.controllerPackName})
#set($modelpackname=${models.modelPackName})
#set($servicepackname=${models.servicePackName})
#set($model=${models.model})
#set($moducode=${models.moduCode})
#set($tid=${models.tid})
#set($syscode=${models.sysCode})
#set($tablelistnames=${models.tableListName})
#set($changetableinfo=${models.changeTableInfo})
package ${controllerpackname};

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.sky.core.base.controller.BaseController;
import ${modelpackname}.${model};
import ${servicepackname}.I${model}Service;
#if(${tablelistnames})
#foreach(${tablelistname} in ${tablelistnames})
import ${modelpackname}.${model}${tablelistname};
import ${servicepackname}.I${model}${tablelistname}Service;
#end
#end
import com.sky.core.exception.BusinessException;
import com.sky.core.message.Message;
import com.sky.core.page.Page;

import reactor.core.publisher.Mono;

@RestController
public class ${model}Controller extends BaseController{
	@Resource(name = "${model}Service")
	private I${model}Service ${model}Service;
#if(${tablelistnames})
#foreach(${tablelistname} in ${tablelistnames})
	@Resource(name = "${model}${tablelistname}Service")
	private I${model}${tablelistname}Service ${model}${tablelistname}Service;
#end
#end
	@RequestMapping(value = "/${syscode}/${tid}L.do", method = RequestMethod.POST)
	@ResponseBody
	public Mono<Page<${model}>> get${model}PageList(@RequestBody Page<${model}> page, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		page.setRequest(request);
		${model}Service.findForPageList("com.sky.app.mapper.${model}Mapper.findForPageList", page);
		page.setRequest(null);
		return Mono.justOrEmpty(page);
	}

	@PutMapping(value = "/${syscode}/${tid}I.do")
	@ResponseBody
	public Mono<Message> insert${model}(@RequestBody ${model} ${model}, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			if (${model}!= null) {
#if(${changetableinfo})
				${changetableinfo}
#end
#if(${tablelistnames})
#foreach(${tablelistname} in ${tablelistnames})
				${model}${tablelistname} ${model}${tablelistname}=new ${model}${tablelistname}();
				Copy(${model},${model}${tablelistname});
			    ${model}${tablelistname}Service.save(${model}${tablelistname});
#end
#end
				return Mono.justOrEmpty(new Message("000001"));
			} else {
				return Mono.justOrEmpty(new Message("000004"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("-000000", e.getMessage());
		}
	}
	@PutMapping(value = "/${syscode}/${tid}U.do")
	@ResponseBody
	public Mono<Message> update${model}(@RequestBody ${model} ${model}, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			if (${model} != null) {
#if(${changetableinfo})
				${changetableinfo}
#end
#if(${tablelistnames})
#foreach(${tablelistname} in ${tablelistnames})
				${model}${tablelistname} ${model}${tablelistname}=new ${model}${tablelistname}();
				Copy(${model},${model}${tablelistname});
			    ${model}${tablelistname}Service.update(${model}${tablelistname});
#end
#end
				return Mono.justOrEmpty(new Message("000003"));
			} else {
				return Mono.justOrEmpty(new Message("000006"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("-000000", e.getMessage());
		}
	}
	@DeleteMapping("/${syscode}/${tid}D.do")
	@ResponseBody
	public Mono<Message> delete${model}(@RequestParam String[] delKeys, HttpServletRequest request,
			HttpServletResponse response) {
		try {
			if (delKeys == null || delKeys.length == 0)
				throw new BusinessException("000005");
			for (String delKey : delKeys) {
#if(${tablelistnames})
#foreach(${tablelistname} in ${tablelistnames})
			${model}${tablelistname}Service.delete(delKey);
#end
#end
			}
			return Mono.justOrEmpty(new Message("000002"));
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("-000000", e.getMessage());
		}
	}
	//实现两个实体类属性之间的复制
	public static void Copy(Object source, Object dest) throws Exception {
		// 获取属性
		BeanInfo sourceBean = Introspector.getBeanInfo(source.getClass(),
				java.lang.Object.class);
		PropertyDescriptor[] sourceProperty = sourceBean
				.getPropertyDescriptors();
 
		BeanInfo destBean = Introspector.getBeanInfo(dest.getClass(),
				java.lang.Object.class);
		PropertyDescriptor[] destProperty = destBean.getPropertyDescriptors();
 
		try {
			for (int i = 0; i < sourceProperty.length; i++) {
 
				for (int j = 0; j < destProperty.length; j++) {
 
					if (sourceProperty[i].getName().equals(
							destProperty[j].getName())) {
						// 调用source的getter方法和dest的setter方法
						destProperty[j].getWriteMethod().invoke(
								dest,
								sourceProperty[i].getReadMethod()
										.invoke(source));
						break;
					}
				}
			}
		} catch (Exception e) {
			throw new Exception("属性值复制失败:" + e.getMessage());
		}
	}
}
