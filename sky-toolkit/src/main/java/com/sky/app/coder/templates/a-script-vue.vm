#set($store="\$store")
import datetool from '@/libs/datetool';
import pagepublictool from '@/libs/pagepublictool';
import Cookies from 'js-cookie';
import ${moducode}Column from './${moducode}-column.js';

export default {
    name: '${moducode}-info',
    data () {
        return {
        	listurl: '/${moducode}/${tid}L.do', 
        	saveurl: '/${moducode}/${tid}I.do',
        	deleteurl: '/${moducode}/${tid}D.do',
        	updateurl: '/${moducode}/${tid}U.do',
#if($inputs)
#foreach($input in $inputs)       	
        	${input.value}:'',
#end
#end
#if($modals) 
#foreach($modal in $modals) 
#if(${modal.value})     	
        	${modal.value}:false,
#end
#if(${modal.form})         	
        	${modal.form}:{},
#if(${modal.loading})        	
        	${modal.loading}:true,
#end        	
#end        	
#end 
#end        	
        	selectedLines: 0,
        	data_list:[],
        	pageSize: 10,
            currentPage: 1,
            totalPage: 0,
            totalCount: 0,
        	buttonInfos:[
        		{title:'查看',
		        code:'100101',
		        icon:'info',
		        href:'view'
		        },
		        {title:'新增',
		        code:'100102',
		        icon:'primary',
		        href:'add'
		        },
		        {title:'修改',
		        code:'100103',
		        icon:'warning',
		        href:'upd'
		        },
		        {title:'删除',
		        code:'100104',
		        icon:'error',
		        href:'del'
        		} 	   
        	],          
        	columns:[],
#if(${addform.rules})
        	${addform.rules}:{
#if($addformitems)
#foreach($addformitem in $addformitems)        	
#if(${addformitem.prop} && ${addformitem.required} && ${addformitem.value} && ${addformitem.label})
        	    ${addformitem.value}: [
                   	 {required: true, message: '${addformitem.label}不可为空', trigger: 'blur' }
                   ]#if($foreach.hasNext),#end  
                                 
#end
#end
#end
        	},
#end 
#if(${updform.rules})
        	${updform.rules}:{
#if($updformitems)
#foreach($updformitem in $updformitems)        	
#if(${updformitem.prop} && ${updformitem.required} && ${updformitem.value} && ${updformitem.label})
        	    ${updformitem.value}: [
                   	 {required: true, message: '${updformitem.label}不可为空', trigger: 'blur' }
                   ]#if($foreach.hasNext),#end

#end
#end
#end
        	},
#end 
       	    deleteKey:[]
        };
    },
    methods: {
    	getSearch() {
    		let menuCode = Cookies.get('menucode');
        	return {'menuCode':menuCode,'pageSize': this.pageSize, 'currentPage': this.currentPage
        	#if($inputs),'valObj':{#foreach($input in $inputs)'${input.value}': this.${input.value}#if($foreach.hasNext),#end#end}#end
        	};
        },  
        init () {
       		pagepublictool.setPage(this);
        	pagepublictool.page(this.getSearch());
        	//pagepublictool.getButtons();
        	this.columns=${moducode}Column.getColumns();
        },
        searching () {
    		pagepublictool.page(this.getSearch());
        },
        onClicking(type){
         	if(type==='VIEW' || type==='view') pagepublictool.view();
        	else if(type==='ADD'  || type==='add') pagepublictool.add();
        	else if(type==='UPD' || type==='upd') pagepublictool.update();
        	else if(type==='DEL' || type==='del') pagepublictool.delete(this.deleteurl+"?delKeys="+this.deleteKey.join(','));
        },
        saving(refValue){
         	pagepublictool.save(refValue);
        },
        reseting (refValue) {
 			pagepublictool.reset(refValue);
        },
        choicing(selection, row) {
        	pagepublictool.choice(selection, row);
        	this.deleteKey.push(row.${tableprimary});
        },
        cancing(selection, row){
        	pagepublictool.cancel(selection, row);
        	if(this.selectedLines>0){
        		this.deleteKey.splice(this.deleteKey.indexOf(row.${tableprimary}), 1);
        	}
        },
        choicingAll(selection){
        	this.selectedLines=selection.length;
        	this.deleteKey=[];
        	for(var i=0;i<this.selectedLines;i++){
        		this.deleteKey.push(selection[i].${tableprimary})
        	}
        },
        cancingAll(selection){
        	this.selectedLines=selection.length;
        	if(this.selectedLines==0){
        		this.deleteKey=[];
        	}
        },
        changePage (page) {
        	let cond = this.getSearch();
        	cond.currentPage = page;
        	pagepublictool.page(cond);
        },
        changePageSize (_pageSize) {
        	let cond = this.getSearch();
        	cond.pageSize = _pageSize;
        	pagepublictool.page(cond);        	
        },
    },
    created() {
    	this.init();
    },
    computed:{
			getSizeValue(){
			 	//个性化设置，设置字体大小
				const sizeValue=Cookies.get("sizeValue");
				const size=this.$store.state.app.sizeFont;
				if(!sizeValue){
					return size;
				}else{
					return sizeValue;
				}
	    	}
    }  
};