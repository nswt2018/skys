#set($store="\$store")
import datetool from '@/libs/datetool';
import pagepublictool from '@/libs/pagepublictool';
import Cookies from 'js-cookie';
import ${moducode}Column from './${moducode}-column.js';

export default {
    name: '${moducode}-info',
    data () {
        return {
        	listurl: '/${syscode}${tid}L.do', 
        	saveurl: '/${syscode}${tid}I.do',
        	deleteurl: '/${syscode}${tid}D.do',
        	updateurl: '/${syscode}${tid}U.do',
        	selecturl:'/SelectValue.do',
#if($viewformitems)
#foreach($viewformitem in $viewformitems)
#if(${viewformitem.select.selectFields})
			${viewformitem.select.selectFields.get(0)}ViewSelect:[],
#end
#if(${viewformitem.radio.radioFields})
			${viewformitem.radio.radioFields.get(0)}ViewRadio:[],
#end
#if(${viewformitem.checkbox.checkboxFields})
			${viewformitem.checkbox.checkboxFields.get(0)}ViewCheckbox:[],
#end			
#end
#end
#if($addformitems)
#foreach($addformitem in $addformitems)
#if(${addformitem.select.selectFields})
			${addformitem.select.selectFields.get(0)}Select:[],
#end
#if(${addformitem.radio.radioFields})
			${addformitem.radio.radioFields.get(0)}Radio:[],
#end
#if(${addformitem.checkbox.checkboxFields})
			${addformitem.checkbox.checkboxFields.get(0)}Checkbox:[],
#end			
#end
#end
#if($inputs)
#foreach($input in $inputs) 
#if(${input.defaultValue})
			${input.value}:'${input.defaultValue}',
#else     	
        	${input.value}:'',
#end
#end
#end
#if($modals) 
#foreach($modal in $modals) 
#if(${modal.value})     	
        	${modal.value}:false,
#end
#if(${modal.form})         	
        	${modal.form}:{
#if(${modal.form}=="addForm")
#if($addformitems)
#foreach($formitem in $addformitems)
#if(${formitem.input}&&${formitem.input.defaultValue})
				"${formitem.input.value}":"${formitem.input.defaultValue}",
#end
#if(${formitem.inputNumber}&&${formitem.inputNumber.defaultValue})
				"${formitem.inputNumber.value}":"${formitem.inputNumber.defaultValue}",
#elseif(${formitem.inputNumber})
				${formitem.inputNumber.value}:1,
#end
#if(${formitem.datepicker}&&${formitem.datepicker.defaultValue})
				"${formitem.datepicker.value}":"${formitem.datepicker.defaultValue}",
#end
#if(${formitem.select}&&${formitem.select.defaultValue})
				"${formitem.select.value}":"${formitem.select.defaultValue}",
#end
#if(${formitem.radio}&&${formitem.radio.defaultValue})
				"${formitem.radio.value}":"${formitem.radio.defaultValue}",
#end
#if(${formitem.checkbox}&&${formitem.checkbox.defaultValue})
				"${formitem.checkbox.value}":"${formitem.checkbox.defaultValue}",
#end
#end
#end
#end
             },
#if(${modal.loading})        	
        	${modal.loading}:true,
#end        	
#end        	
#end 
#end        	
        	selectedLines: 0,
        	data_list:[],
        	pageSize: 10,
            currentPage: 1,
            totalPage: 0,
            totalCount: 0,
        	buttonInfos:[
        		{title:'查看',
		        code:'100101',
		        icon:'info',
		        href:'view'
		        },
		        {title:'新增',
		        code:'100102',
		        icon:'primary',
		        href:'add'
		        },
		        {title:'修改',
		        code:'100103',
		        icon:'warning',
		        href:'upd'
		        },
		        {title:'删除',
		        code:'100104',
		        icon:'error',
		        href:'del'
        		} 	   
        	],          
        	columns:[],
#if(${addform.rules})
        	${addform.rules}:{
#if($addformitems)
#foreach($addformitem in $addformitems)        	
#if(${addformitem.prop} && ${addformitem.required} && ${addformitem.label})
#if(${addformitem.input})
        	    ${addformitem.input.value}: [
                   	 {required: true, message: '${addformitem.label}不可为空', trigger: 'blur' }
                   ],
#end
#if(${addformitem.datepicker})
        	    ${addformitem.datepicker.value}: [
                   	 {required: true,type:'date', message: '${addformitem.label}不可为空', trigger: 'blur' }
                   ],
#end
#if(${addformitem.inputNumber})
        	    ${addformitem.inputNumber.value}: [
                   	 {required: true,type:'number', message: '${addformitem.label}不可为空', trigger: 'blur' }
                   ],
#end                                
#end
#end
#end
        	},
#end 
#if(${updform.rules})
        	${updform.rules}:{
#if($updformitems)
#foreach($updformitem in $updformitems)        	
#if(${updformitem.prop} && ${updformitem.required} && ${updformitem.label})
#if(${updformitem.input})
        	    ${updformitem.input.value}: [
                   	 {required: true, message: '${updformitem.label}不可为空', trigger: 'blur' }
                   ],
#end
#if(${updformitem.datepicker})
        	    ${updformitem.datepicker.value}: [
                   	 {required: true,type:'date', message: '${updformitem.label}不可为空', trigger: 'blur' }
                   ],
#end
#if(${updformitem.inputNumber})
        	    ${updformitem.inputNumber.value}: [
                   	 {required: true,type:'number', message: '${updformitem.label}不可为空', trigger: 'blur' }
                   ],
#end
#end
#end
#end
        	},
#end 
       	    deleteKey:[]
        };
    },
    methods: {
    	getSearch() {
    		let menuCode = Cookies.get('menucode');
    		let param;
        	if(this.$route.query.vue_showparam){
    			param = this.getParam();
    		}else{
    			param = {#foreach($input in $inputs)'${input.value}': this.${input.value}#if($foreach.hasNext),#end#end};
    		}
        	return {'menuCode':menuCode,'pageSize': this.pageSize, 'currentPage': this.currentPage
        	,'valObj':param}; 
        },
        getParam(){
	        if(this.$route.query.vue_showparam){
	        	var param={#foreach($field in $fields)'${field.get(0)}':''#if($foreach.hasNext),#end#end}
        		var showParamArr=this.$route.query.vue_showparam.split(",");
        		for(var showParam of showParamArr){
#if($fields)
#foreach($field in $fields)
					if("${field.get(0)}"==showParam){
		        		param.${field.get(0)} = this.$route.query.${field.get(0)};
					}else if(param.${field.get(0)} == ""){
						param.${field.get(0)} = this.${field.get(0)};
					}
#end
#end
        		}       		 
        	return param;
        	}
        },  
        init () {
       		pagepublictool.setPage(this);
        	//pagepublictool.getButtons();
        	this.columns=${moducode}Column.getColumns();      	
        	//树模型，用于挂树节点
        	if(this.$route.query.vue_showparam){
        		var showParamArr=this.$route.query.vue_showparam.split(",");
        		for(var showParam of showParamArr){
#if($fields)
#foreach($field in $fields)
					if("${field.get(0)}"==showParam){
		        		this.addForm.${field.get(0)} = this.$route.query.${field.get(0)};
					}
#end
#end
        		}
				pagepublictool.page(this.getSearch());
        	}else{
        		pagepublictool.page(this.getSearch());
        	}
        	if(this.$route.query.vue_type){
               	this.type = this.$route.query.vue_type;
            	if(this.type==='VIEW' || this.type==='view'){
                	this.buttonInfos = [{
                		title:'查看',
        		        code:'100101',
        		        icon:'info',
        		        href:'view'
        		        }];
            	}else if(this.type==='ADD'  || this.type==='add'){
            		this.buttonInfos = [{
            			title:'新增',
        		        code:'100102',
        		        icon:'primary',
        		        href:'add'
        		        }];       		
            	}else if(this.type==='UPD' || this.type==='upd'){
            		this.buttonInfos = [{
            			title:'修改',
    			        code:'100103',
    			        icon:'warning',
    			        href:'upd'
    			        }];     		
            	}else if(this.type==='DEL' || this.type==='del'){
            		this.buttonInfos = [{
            			title:'删除',
    			        code:'100104',
    			        icon:'error',
    			        href:'del'
    	        		}];       		
            	}
        	}
        	//下拉框、多选框、单选框，字段值赋值
#if($viewformitems)
#foreach($viewformitem in $viewformitems)
#if(${viewformitem.select.selectFields})
			this.${viewformitem.select.selectFields.get(0)}ViewSelect=pagepublictool.getSelectList({table:'${tablename}',field:'${viewformitem.select.selectFields.get(1)}'});
#end
#if(${viewformitem.radio.radioFields})
			this.${viewformitem.radio.radioFields.get(0)}ViewRadio=pagepublictool.getSelectList({table:'${tablename}',field:'${viewformitem.radio.radioFields.get(1)}'});
#end
#if(${viewformitem.checkbox.checkboxFields})
			this.${viewformitem.checkbox.checkboxFields.get(0)}ViewCheckbox=pagepublictool.getSelectList({table:'${tablename}',field:'${viewformitem.checkbox.checkboxFields.get(1)}'});
#end			
#end
#end
#if($addformitems)
#foreach($addformitem in $addformitems)
#if(${addformitem.select.selectFields})
			this.${addformitem.select.selectFields.get(0)}Select=pagepublictool.getSelectList({table:'${tablename}',field:'${addformitem.select.selectFields.get(1)}'});
#end
#if(${addformitem.radio.radioFields})
			this.${addformitem.radio.radioFields.get(0)}Radio=pagepublictool.getSelectList({table:'${tablename}',field:'${addformitem.radio.radioFields.get(1)}'});
#end
#if(${addformitem.checkbox.checkboxFields})
			this.${addformitem.checkbox.checkboxFields.get(0)}Checkbox=pagepublictool.getSelectList({table:'${tablename}',field:'${addformitem.checkbox.checkboxFields.get(1)}'});
#end			
#end
#end
        },
        searching () {
    		pagepublictool.page(this.getSearch());
        },
        onClicking(type){
#if(${istree}=='1')
        	//树模型
			let router=this.$router;
			let query = {
	        	vue_id:this.viewForm.${tableprimary},
	        	vue_code:'${titleName}',
	        	vue_type:type,
#if($fields)
#foreach($field in $fields)
				${field.get(0)}:this.viewForm.${field.get(0)}#if($foreach.hasNext),#end
    
#end
#end	        	      		        	
        	};
        	if(type==='VIEW' || type==='view'){
         		if(!this.$route.query){
         			pagepublictool.view();
         		}else{
         			if(pagepublictool.check()!='1'){
         				return;
         			}
        	        router.push({
        	             name: '${moducode}treemode',
        	             query: query
        	         });
         		}
    		}else if(type==='ADD'  || type==='add'){
	        	if(!this.$route.query){
	        		pagepublictool.add();
	        	}else{
		    		router.push({
		    		     name: '${moducode}treemode',
		    		     query: query
		    		});
	        	}
       		 }else if(type==='UPD' || type==='upd'){
        		if(!this.$route.query){
        			pagepublictool.update();      			
        		}else{
        			if(pagepublictool.check()!='1'){
         				return;
         			}
    		        router.push({
    		            name: '${moducode}treemode',
    		            query: query
    		        });
        		}
        	}else if(type==='DEL' || type==='del'){
        		if(!this.$route.query){
        			pagepublictool.delete(this.deleteurl+"?delKeys="+this.deleteKey.join(','));    			
        		}else{
        			if(pagepublictool.check()!='1'){
         				return;
         			}
    		        router.push({
    		        	name:'${moducode}treemode',
	    		        query: query
    		        });         		
        		}
        	}
#else
				if(type==='VIEW' || type==='view') pagepublictool.view();
        		else if(type==='ADD'  || type==='add') pagepublictool.add();
        		else if(type==='UPD' || type==='upd') pagepublictool.update();
        		else if(type==='DEL' || type==='del') pagepublictool.delete(this.deleteurl+"?delKeys="+this.deleteKey.join(','));
#end
        },
        saving(refValue){
     		//多选下拉框、多选框，将选择的多个值用逗号隔开转为字符串
#if($addformitems)
#foreach($addformitem in $addformitems)
#if(${addformitem.select.selectFields} && ${addformitem.select.multiple}=="true")
			if(this.addForm.${addformitem.select.selectFields.get(0)}){
				this.addForm.${addformitem.select.selectFields.get(0)}=this.addForm.${addformitem.select.selectFields.get(0)}.join(',');
			}
			if(this.updForm.${addformitem.select.selectFields.get(0)}){
				this.updForm.${addformitem.select.selectFields.get(0)}=this.updForm.${addformitem.select.selectFields.get(0)}.join(',');
			}
#end
#if(${addformitem.checkbox.checkboxFields})
			if(this.addForm.${addformitem.checkbox.checkboxFields.get(0)}){
				this.addForm.${addformitem.checkbox.checkboxFields.get(0)}=this.addForm.${addformitem.checkbox.checkboxFields.get(0)}.join(',');
			}
			if(this.updForm.${addformitem.checkbox.checkboxFields.get(0)}){
				this.updForm.${addformitem.checkbox.checkboxFields.get(0)}=this.updForm.${addformitem.checkbox.checkboxFields.get(0)}.join(',');
			}
#end			
#end
#end
         	pagepublictool.save(refValue);
        },
        reseting (refValue) {
 			pagepublictool.reset(refValue);
        },
        choicing(selection, row) {
        	pagepublictool.choice(selection, row);
        	this.deleteKey.push(row.${tableprimary});
        	//将修改对话框的多选下拉框、多选框，以逗号隔开的字符串转为数组
#if($addformitems)
#foreach($addformitem in $addformitems)
#if(${addformitem.select.selectFields} && ${addformitem.select.multiple}=="true")
			if(this.updForm.${addformitem.select.selectFields.get(0)}){
				this.updForm.${addformitem.select.selectFields.get(0)}=row.${addformitem.select.selectFields.get(0)}.split(',');
			}
#end
#if(${addformitem.checkbox.checkboxFields})
			if(this.updForm.${addformitem.checkbox.checkboxFields.get(0)}){
				this.updForm.${addformitem.checkbox.checkboxFields.get(0)}=row.${addformitem.checkbox.checkboxFields.get(0)}.split(',');
			}
#end			
#end
#end
#if($tablecolumns)
#foreach($tablecolumn in $tablecolumns)
#if(${tablecolumn.isDate}=="true")
			this.updForm.${tablecolumn.value}=datetool.format(row.${tablecolumn.value});
#end
#end
#end
        },
        cancing(selection, row){
        	pagepublictool.cancel(selection, row);
        	if(this.selectedLines>0){
        		this.deleteKey.splice(this.deleteKey.indexOf(row.${tableprimary}), 1);
 #if($addformitems)
#foreach($addformitem in $addformitems)
#if(${addformitem.select.selectFields} && ${addformitem.select.multiple}=="true")
				this.updForm.${addformitem.select.selectFields.get(0)}='';
#end
#if(${addformitem.checkbox.checkboxFields})
				this.updForm.${addformitem.checkbox.checkboxFields.get(0)}='';
#end			
#end
#end
        	}
        },
        choicingAll(selection){
        	this.selectedLines=selection.length;
        	this.deleteKey=[];
        	for(var i=0;i<this.selectedLines;i++){
        		this.deleteKey.push(selection[i].${tableprimary})
        	}
        },
        cancingAll(selection){
        	this.selectedLines=selection.length;
        	if(this.selectedLines==0){
        		this.deleteKey=[];
        	}
        },
        changePage (page) {
        	let cond = this.getSearch();
        	cond.currentPage = page;
        	pagepublictool.page(cond);
        },
        changePageSize (_pageSize) {
        	let cond = this.getSearch();
        	cond.pageSize = _pageSize;
        	pagepublictool.page(cond);        	
        },
    },
    created() {
    	this.init();
    },
    computed:{
			getSizeValue(){
			 	//个性化设置，设置字体大小
				const sizeValue=Cookies.get("sizeValue");
				const size=this.$store.state.app.sizeFont;
				if(!sizeValue){
					return size;
				}else{
					return sizeValue;
				}
	    	}
    }  
};